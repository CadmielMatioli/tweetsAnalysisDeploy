{"version":3,"sources":["Home.js","Paginador.js","lista.js","GraficoBarras.js","GraficoPizza.js","GraficoBarrasAno.js","Graficos.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","Container","Row","Card","Body","href","target","Paginador","useState","offset","setOffset","currentPage","setCurrentPage","data","setData","currentData","setCurrentData","useEffect","dados","slice","Header","as","Table","striped","bordered","hover","variant","map","index","key","usuario","texto","sentimento","date","year","Date","getFullYear","month","getMonth","getDate","formatDate","totalRecords","length","pageLimit","pageNeighbours","Lista","GraficoBarras","dayListSun","dayListMon","dayListTue","dayListWed","dayListThu","dayListFri","dayListSat","tweetsList","setTweetsList","fetch","then","json","includes","width","height","chartType","loader","options","chart","title","subtitle","rootProps","Graficos","negativeTweets","positiveTweets","pieHole","is3D","monthListMay","monthListApr","monthListJun","GraficoPizza","GraficoBarrasAno","App","bsPrefix","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9619ea24.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Home.css\";\r\nimport { Card, Container, Row } from \"react-bootstrap\";\r\nfunction Home(props) {\r\n  return (\r\n    <div className=\"content\">\r\n      <Container className=\"mt-5\">\r\n        <Row>\r\n          <Card className=\"bg-dark text-white w-100 m-2\">\r\n            <Card.Body className=\"p-0 overflow-auto\">\r\n              <p className=\"home\">\r\n                A ascens√£o das m√≠dias sociais, como blogs e redes sociais tem\r\n                despertado interesse em an√°lise de sentimento. Com a\r\n                prolifera√ß√£o de opini√µes, avalia√ß√µes, recomenda√ß√µes e outras\r\n                formas de express√£o on-line, a opini√£o se transformou em uma\r\n                esp√©cie de moeda virtual para empresas que desejam comercializar\r\n                os seus produtos, identificar novas oportunidades e gerenciar\r\n                suas reputa√ß√µes. Como as empresas est√£o cada vez mais\r\n                interessadas em automatizar o processo de pesquisa sobre o que\r\n                est√° sendo falado sobre elas, a compreens√£o das conversas nas\r\n                m√≠dias sociais, a fim de identificar conte√∫do relevante, que\r\n                permita tomar a√ß√µes espec√≠ficas, tem levado as empresas a buscar\r\n                solu√ß√µes de an√°lise de sentimentos. Nossa vis√£o do mundo √©\r\n                muitas vezes influenciada pela vis√£o e opini√£o de outras\r\n                pessoas. E isso n√£o acontece apenas com indiv√≠duos, mas tamb√©m\r\n                com as empresas. E por isso, cada vez mais as empresas est√£o\r\n                interessadas em saber a percep√ß√£o de outras empresas e\r\n                indiv√≠duos sobre seus produtos e servi√ßos. E esta √© a fun√ß√£o da\r\n                an√°lise de sentimentos, tamb√©m conhecida como opinion mining: √©\r\n                a tarefa de identificar se a opini√£o que foi expressada em um\r\n                determinado texto √© positiva ou negativa. Adaptado de:\r\n                <a href=\"http://www.cienciaedados.com/analise-de-sentimentos-e-machine-learning/\" target=\"_blank\"> http://www.cienciaedados.com/analise-de-sentimentos-e-machine-learning/</a>\r\n              </p>\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Paginador.css\";\r\nimport dados from \"./data/tweets.json\";\r\nimport Paginator from \"react-hooks-paginator\";\r\nimport { Card, Container, Row } from \"react-bootstrap\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nfunction Paginador() {\r\n  const pageLimit = 10;\r\n  const [offset, setOffset] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [data, setData] = useState([]);\r\n  const [currentData, setCurrentData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setData(dados);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCurrentData(data.slice(offset, offset + pageLimit));\r\n  }, [offset, data]);\r\n\r\n  function formatDate(date) {\r\n    var date = new Date(date);\r\n    var year = date.getFullYear();\r\n    var month = date.getMonth() + 1;\r\n    var day = date.getDate();\r\n    var formatted = day + \"-\" + month + \"-\" + year;\r\n    return formatted;\r\n  }\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row>\r\n          <Card className=\"bg-dark text-white w-100 m-2\">\r\n            <Card.Header as=\"h5\" className=\"text-center\">\r\n              Listagem de Tweetts\r\n            </Card.Header>\r\n            <Card.Body className=\"p-0 overflow-auto max-height\">\r\n              <Table striped bordered hover variant=\"dark\">\r\n                <thead className=\"head\">\r\n                  <tr>\r\n                    <th>Usu√°rio</th>\r\n                    <th>Tweet</th>\r\n                    <th>Sentimento</th>\r\n                    <th>Data</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {currentData.map((data, index) => (\r\n                    <tr>\r\n                      <td key={index}>@{data.usuario}</td>\r\n                      <td>{data.texto}</td>\r\n                      <td>{data.sentimento == 4 ? \"üòÉ\" : \"üôÅ\"}</td>\r\n                      <td>{formatDate(data.data)}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </Card.Body>\r\n            <Paginator\r\n              totalRecords={data.length}\r\n              pageLimit={pageLimit}\r\n              pageNeighbours={1}\r\n              setOffset={setOffset}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n            />\r\n          </Card>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Paginador;\r\n","import React from \"react\";\r\nimport \"./lista.css\";\r\n\r\nimport Paginador from \"./Paginador\";\r\n\r\nfunction Lista() {\r\n  return (\r\n    <div className=\"page\">\r\n      <Paginador></Paginador>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lista;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport dados from \"./data/tweets.json\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nfunction GraficoBarras(props) {\r\n  let dayListSun = 0;\r\n  let dayListMon = 0;\r\n  let dayListTue = 0;\r\n  let dayListWed = 0;\r\n  let dayListThu = 0;\r\n  let dayListFri = 0;\r\n  let dayListSat = 0;\r\n\r\n  const [tweetsList, setTweetsList] = useState([]);\r\n  function getTweets() {\r\n    fetch(dados).then((json) => {\r\n      setTweetsList(dados);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    getTweets();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {tweetsList.map((index) => {\r\n        if (index.data.includes(\"Sun\")) dayListSun++;\r\n        if (index.data.includes(\"Mon\")) dayListMon++;\r\n        if (index.data.includes(\"Tue\")) dayListTue++;\r\n        if (index.data.includes(\"Wed\")) dayListWed++;\r\n        if (index.data.includes(\"Thu\")) dayListThu++;\r\n        if (index.data.includes(\"Fri\")) dayListFri++;\r\n        if (index.data.includes(\"Sat\")) dayListSat++;\r\n      })}\r\n      <Chart\r\n        width={\"100%\"}\r\n        height={\"300px\"}\r\n        chartType=\"Bar\"\r\n        loader={<div>Carregando Gr√°fico</div>}\r\n        data={[\r\n          [\"Dias da Semana\", \"Tweets\"],\r\n          [\"Dom\", dayListSun],\r\n          [\"Seg\", dayListMon],\r\n          [\"Ter\", dayListTue],\r\n          [\"Qua\", dayListWed],\r\n          [\"Qui\", dayListThu],\r\n          [\"Sex\", dayListFri],\r\n          [\"Sab\", dayListSat],\r\n        ]}\r\n        options={{\r\n          chart: {\r\n            title: \"Tweets por semana\",\r\n            subtitle: \"Tweets por semana: Abril - Junho 2009\",\r\n          },\r\n        }}\r\n        rootProps={{ \"data-testid\": \"2\" }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraficoBarras;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport dados from \"./data/tweets.json\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nfunction Graficos(props) {\r\n  let negativeTweets = 0;\r\n  let positiveTweets = 0;\r\n\r\n  const [tweetsList, setTweetsList] = useState([]);\r\n  function getTweets() {\r\n    fetch(dados).then((json) => {\r\n      setTweetsList(dados);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    getTweets();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {tweetsList.map((index) => {\r\n        if (index.sentimento == 0) negativeTweets++;\r\n        if (index.sentimento == 4) positiveTweets++;\r\n      })}\r\n      <Chart\r\n        width={\"100%\"}\r\n        height={\"300px\"}\r\n        chartType=\"PieChart\"\r\n        loader={<div>Carregando Gr√°fico</div>}\r\n        data={[\r\n          [\"Rea√ß√£o\", \"Qtd Tweets\"],\r\n          [\"Negativa\", negativeTweets],\r\n          [\"Positiva\", positiveTweets],\r\n        ]}\r\n        options={{ title: \"Rea√ß√µes Tweets\", pieHole: 0.4, is3D: false }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graficos;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport dados from \"./data/tweets.json\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nfunction GraficoBarras(props) {\r\n  let monthListMay = 0;\r\n  let monthListApr = 0;\r\n  let monthListJun = 0;\r\n  const [tweetsList, setTweetsList] = useState([]);\r\n  function getTweets() {\r\n    fetch(dados).then((json) => {\r\n      setTweetsList(dados);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    getTweets();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {tweetsList.map((index) => {\r\n        if (index.data.includes(\"May\")) monthListMay++;\r\n        if (index.data.includes(\"Apr\")) monthListApr++;\r\n        if (index.data.includes(\"Jun\")) monthListJun++;\r\n      })}\r\n      <Chart\r\n        width={\"100%\"}\r\n        height={\"300px\"}\r\n        chartType=\"Bar\"\r\n        loader={<div>Carregando Gr√°fico</div>}\r\n        data={[\r\n          [\"M√™s\", \"Tweets\"],\r\n          [\"Abril\", monthListApr],\r\n          [\"Maio\", monthListMay],\r\n          [\"Junho\", monthListJun],\r\n        ]}\r\n        options={{\r\n          chart: {\r\n            title: \"Tweets por m√™s\",\r\n            subtitle: \"Tweets por m√™s: Abril - Junho 2009\",\r\n          },\r\n        }}\r\n        rootProps={{ \"data-testid\": \"2\" }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraficoBarras;\r\n","import React from \"react\";\r\nimport \"./Graficos.css\";\r\nimport GraficoBarras from \"./GraficoBarras\";\r\nimport GraficoPizza from \"./GraficoPizza\";\r\nimport GraficoBarrasAno from \"./GraficoBarrasAno\";\r\nimport { Card, Container, Row } from \"react-bootstrap\";\r\n\r\nfunction Graficos() {\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row>\r\n          <Card className=\"bg-dark text-white w-100 m-2\">\r\n            <Card.Header as=\"h5\" className=\"text-center\">\r\n              Recarregue a pagina caso os gr√°ficos nao carreguem corretamente\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Card className=\"m-2\">\r\n                <Card.Body>\r\n                  {\" \"}\r\n                  <GraficoPizza />\r\n                </Card.Body>\r\n              </Card>\r\n              <Card className=\"m-2\">\r\n                <Card.Body>\r\n                  {\" \"}\r\n                  <GraficoBarras />\r\n                </Card.Body>\r\n              </Card>\r\n              <Card className=\"m-2\">\r\n                <Card.Body>\r\n                  {\" \"}\r\n                  <GraficoBarrasAno />\r\n                </Card.Body>\r\n              </Card>\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\nexport default Graficos;\r\n","import React from \"react\";\nimport Home from \"./Home\";\nimport Lista from \"./lista\";\nimport Graficos from \"./Graficos\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Container, Row } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header>\n        <Container bsPrefix className=\"w-100\">\n          <Router>\n            <main>\n              <nav className=\"menu\">\n                <ul>\n                  <li>\n                    <Link to=\"/\" className=\"menu-links\">\n                      Home\n                    </Link>\n                  </li>\n                  <li>\n                    <Link to=\"/lista\" className=\"menu-links\">\n                      Lista\n                    </Link>\n                  </li>\n                  <li>\n                    <Link to=\"/graficos\" className=\"menu-links\">\n                      Gr√°ficos\n                    </Link>\n                  </li>\n                </ul>\n              </nav>\n              <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/lista\" component={Lista} />\n                <Route path=\"/graficos\" component={Graficos} />\n              </Switch>\n            </main>\n          </Router>\n          <Row>\n            <div className=\"footer\">\n              <p>P√°gina HTML desenvolvida por Cadmiel M. Donato ¬©</p>\n            </div>\n          </Row>\n        </Container>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}